from Base import all

type No_Value_For_Key key

type Map
    type Tip
    type Bin s key value left right

    is_empty : Boolean
    is_empty = case this of
        Bin _ _ _ _ _ -> False
        Tip -> True

    size : Integer
    size = case this of
        Bin s _ _ _ _ -> s
        Tip -> 0

    to_vector : Vector
    to_vector =
        builder = Vector.new_builder
        to_vector_with_builder m = case m of
            Bin _ k v l r ->
                to_vector_with_builder l
                builder.append [k, v]
                to_vector_with_builder r
                Unit
            Tip -> Unit
        to_vector_with_builder this
        result = builder.to_vector
        result

    map : (Any -> Any) -> Map
    map function = case this of
        Bin s k v l r ->
            Bin s k (function v) (l.map function) (r.map function)
        Tip -> Tip

    #to_text : Text
    #to_text = this.to_vector.to_text

    get : Any -> Any
    get key =
        go map = case map of
            Tip -> Error.throw (No_Value_For_Key key)
            Bin _ k v l r ->
                if k == key then v else
                    if k > key then go l else go r
        result = go this
        result

    insert : Any -> Any -> Map
    insert key value =
        go map = case map of
            Tip -> Bin 1 key value Tip Tip
            Bin s k v l r ->
                insert_l =
                    new_left = go l
                    here.balance_left k v new_left r
                insert_r =
                    new_right = go r
                    here.balance_right k v l new_right
                if key > k then insert_r else
                    if key == k then Bin s k value l r else
                        insert_l
        go this

    == : Map -> Boolean
    == that = this.to_vector == that.to_vector

balance_left k x l r = case r of
    Tip -> case l of
        Tip -> Bin 1 k x Tip Tip
        Bin _ _ _ Tip Tip -> Bin 2 k x l Tip
        Bin _ lk lx Tip (Bin _ lrk lrx _ _) -> Bin 3 lrk lrx (Bin 1 lk lx Tip Tip) (Bin 1 k x Tip Tip)
        Bin _ lk lx ll Tip -> Bin 3 lk lx ll (Bin 1 k x Tip Tip)
        Bin ls lk lx ll lr -> case lr of
            Bin lrs lrk lrx lrl lrr ->
                lls = here.size ll
                if lrs < Ratio*lls then Bin 1+ls lk lx ll (Bin 1+lrs k x lr Tip) else
                    lrls = here.size lrl
                    lrrs = here.size lrr
                    Bin 1+ls lrk lrx (Bin 1+lls+lrls lk lx ll lrl) (Bin 1+lrrs k x lrr Tip)
    Bin rs _ _ _ _ -> case l of
        Tip -> Bin 1+rs k x Tip r
        Bin ls lk lx ll lr ->
            if ls <= Delta*rs then Bin 1+ls+rs k x l r else
                lls = here.size ll
                case lr of
                    Bin lrs lrk lrx lrl lrr ->
                        if lrs < ratio*lls then Bin 1+ls+rs lk lx ll (Bin 1+rs+lrs) k x lr r) else
                            lrls = here.size lrl
                            lrrs = here.size lrr
                            Bin 1+ls+rs lrk lrx (Bin 1+lls+lrls lk lx ll lrl) (Bin 1+rs+lrrs k x lrr r)

size m = case m of
    Bin s _ _ _ _ -> s
    Tip -> 0

balance_right k x l r = case l of
    Tip -> case r of
        Tip -> Bin 1 k x Tip Tip
        Bin _ _ _ Tip Tip -> Bin 2 k x Tip r
        Bin _ rk rx Tip rr -> Bin 3 rk rx (Bin 1 k x Tip Tip) rr
        Bin _ rk rx (Bin _ rlk rlx _ _) Tip -> Bin 3 rlk rlx (Bin 1 k x Tip Tip) (Bin 1 rk rx Tip Tip)
        Bin rs rk rx (Bin rls rlk rlx rll rlr) rr -> case rr of
            Bin rrs _ _ _ _ ->
                if rls < Ratio*rrs then Bin 1+rs rk rx (Bin 1+rls k x Tip rl) rr else
                    srll = here.size rll
                    srlr = here.size rlr
                    Bin 1+rs rlk rlx (Bin 1+srll k x Tip rll) (Bin 1+rrs+srlr rk rx rlr rr)
    Bin ls _ _ _ _ -> case r of
        Tip -> Bin 1+ls k x l Tip
        Bin rs rk rx rl rr ->
            if rs <= Delta*ls then Bin 1+ls+rs k x l r else
                case rl of
                    Bin rls rlk rlx rll rlr ->
                        rrs = here.size rr
                        if rls < Ratio*rrs then Bin 1+ls+rs rk rx (Bin 1+ls+rls k x l rl) rr else
                            rlls = here.size rll
                            rlrs = here.size rlr
                            Bin 1+ls+rs rlk rlx (Bin 1+ls+rlls k x l rll) (Bin 1+rrs+rlrs) rk rx rlr rr


empty : Map
empty = Tip

ratio : Integer
ratio = 2

delta : Integer
delta = 3
